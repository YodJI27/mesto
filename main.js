(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e,n){var r=e.item,o=e.handleCardClick;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=r.name,this._link=r.link,this._template=n,this._handleCardClick=o}var n,r;return n=t,(r=[{key:"_getTemplate",value:function(){return document.querySelector(this._template).content.querySelector(".cards__item").cloneNode(!0)}},{key:"generateCard",value:function(){this._element=this._getTemplate(),this._setEventListener(),this._element.querySelector(".cards__text").textContent=this._name;var e=this._element.querySelector(".cards__image");return e.src=this._link,e.alt=this._name,this._element}},{key:"_clickLike",value:function(){this._element.querySelector(".cards__like").classList.toggle("cards__like_active")}},{key:"_deleteCards",value:function(){this._element.remove(),this._element=null}},{key:"_setEventListener",value:function(){var e=this;this._element.querySelector(".cards__like").addEventListener("click",(function(){e._clickLike()})),this._element.querySelector(".cards__delete").addEventListener("click",(function(){e._deleteCards()})),this._element.querySelector(".cards__image").addEventListener("click",(function(){e._handleCardClick()}))}}])&&e(n.prototype,r),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formSelector=document.querySelector(t),this._popupText=n.popupText,this._popupButton=n.popupButton,this._popupTextNameError=n.popupTextNameError,this._popupButonActive=n.popupButonActive}var t,r;return t=e,(r=[{key:"_showInputError",value:function(e,t){var n=this._formSelector.querySelector("#".concat(e.id,"-error"));e.classList.add(this._popupTextNameError),n.textContent=t}},{key:"_hideInputError",value:function(e){var t=this._formSelector.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._popupTextNameError),t.textContent=""}},{key:"removeError",value:function(e,t){t.textContent="",e.classList.remove(this._popupTextNameError)}},{key:"_isValid",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_hasNotValidInput",value:function(e){return e.some((function(e){return!e.validity.valid}))}},{key:"_toggleButtonState",value:function(e,t){this._hasNotValidInput(e)?this.buttonActive(t):this.buttonFalse(t)}},{key:"buttonActive",value:function(e){e.classList.add(this._popupButonActive),e.setAttribute("disabled",!0)}},{key:"buttonFalse",value:function(e){e.classList.remove(this._popupButonActive),e.removeAttribute("disabled")}},{key:"_setEventListener",value:function(e){var t=this,n=Array.from(e.querySelectorAll(this._popupText)),r=e.querySelector(this._popupButton);n.forEach((function(e){e.addEventListener("input",(function(){t._isValid(e),t._toggleButtonState(n,r)}))})),this._toggleButtonState(n,r)}},{key:"enableValidation",value:function(){var e=document.querySelector(this._popupButton);this._formSelector.addEventListener("submit",(function(e){e.preventDefault()})),this.buttonFalse(e),this._setEventListener(this._formSelector)}}])&&n(t.prototype,r),e}(),o=[{name:"Архыз",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg"},{name:"Челябинская область",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg"},{name:"Иваново",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg"},{name:"Камчатка",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg"},{name:"Холмогорский район",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg"},{name:"Байкал",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg"}];function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}o.reverse();var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formSelector=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._formSelector.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._formSelector.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._formSelector.querySelector(".popup__close").addEventListener("click",(function(){e.close}))}}])&&c(t.prototype,n),e}();function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t,n){return(l="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=f(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var _=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(i,e);var t,n,r,o,c=(r=i,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(r);if(o){var n=f(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return p(this,e)});function i(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(n=c.call(this,e))._renderer=t,n._form=n._formSelector.querySelector(".popup__container"),n._formElement=n._formSelector.querySelectorAll(".popup__text"),n.setEventListeners(),n}return t=i,(n=[{key:"_getInputValues",value:function(){var e=this;return this._case={},this._formElement.forEach((function(t){e._case[t.name]=t.value})),this._case}},{key:"close",value:function(){this._form.reset(),l(f(i.prototype),"close",this).call(this)}},{key:"setEventListeners",value:function(){var e=this;this._formSelector.addEventListener("submit",(function(){e._renderer(e._getInputValues()),e.close()})),l(f(i.prototype),"setEventListeners",this).call(this)}}])&&a(t.prototype,n),i}(i),d={formSelector:".popup__container",formSelectorCards:".popup__container_cards_item",popupText:".popup__text",popupButton:".popup__button",popupTextNameError:"popup__text_name_error",popupButonActive:"popup__button_active_not"},y=document.querySelector(".popup"),m=document.querySelector(".profile__edit_open_popup"),h=document.querySelector(".profile__add"),v=document.querySelector(".popup__text_name_input"),b=document.querySelector(".popup__text_job_input"),S=(document.querySelector(".profile__author"),document.querySelector(".profile__description"),document.querySelector(".popup__container")),k=document.querySelector(".photo"),g=document.querySelector(".photo__image"),E=document.querySelector(".photo__text"),w=document.querySelector(".popup_cards"),L=document.querySelector(".popup__text_name_cards"),j=document.querySelector(".popup__text_job_cards"),x=document.querySelector(".popup__button_save_form"),q=document.querySelector(".popup__button_form_save"),C=document.getElementById("name-input-error"),O=document.getElementById("job-input-error"),P=document.getElementById("input-name-error"),T=document.getElementById("url-input-error");function I(e){return(I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function R(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function B(e,t,n){return(B="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=V(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function A(e,t){return(A=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function N(e,t){return!t||"object"!==I(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function V(e){return(V=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var D=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&A(e,t)}(i,e);var t,n,r,o,c=(r=i,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=V(r);if(o){var n=V(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return N(this,e)});function i(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),c.call(this,e)}return t=i,(n=[{key:"open",value:function(e,t){g.src=t,g.alt=e,E.textContent=e,B(V(i.prototype),"setEventListeners",this).call(this),B(V(i.prototype),"open",this).call(this)}}])&&R(t.prototype,n),i}(i);function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var F=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=r,this._renderer=o,this._formSelector=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderElement",value:function(){var e=this;this._items.forEach((function(t){e._renderer(t)}))}},{key:"addItem",value:function(e){this._formSelector.prepend(e)}}])&&U(t.prototype,n),e}();function z(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var M=new(function(){function e(t){var n=t.nameSelector,r=t.jobSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._nameSelector=document.querySelector(n),this._jobSelector=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._nameSelector.textContent,job:this._jobSelector.textContent}}},{key:"setUserInfo",value:function(e,t){this._nameSelector.textContent=e,this._jobSelector.textContent=t}}])&&z(t.prototype,n),e}())({nameSelector:".profile__author",jobSelector:".profile__description"}),G=new i(".popup"),H=function(e){e.preventDefault(),M.setUserInfo(v.value,b.value),G.close()};y.addEventListener("click",(function(e){(e.target.classList.contains("popup")||e.target.classList.contains("popup__close"))&&(S.removeEventListener("submit",H),X.removeError(v,O),X.removeError(b,C),G.close())})),w.addEventListener("click",(function(e){(e.target.classList.contains("popup_cards")||e.target.classList.contains("popup__close_cards_item"))&&(Y.removeError(L,P),Y.removeError(j,T),K.close())})),k.addEventListener("click",(function(e){(e.target.classList.contains("photo")||e.target.classList.contains("photo__close"))&&Q.close()}));var J=function(e){var n=new t({item:e,handleCardClick:function(){Q.open(e.name,e.link)}},"#cards__template").generateCard();W.addItem(n)},K=new _("#cards__popup",(function(e){J(e)})),Q=new D(".photo"),W=new F({items:o,renderer:J},".cards");W.renderElement(o),h.addEventListener("click",(function(){Y.buttonActive(x),K.open()})),m.addEventListener("click",(function(){v.value=M.getUserInfo().name,b.value=M.getUserInfo().job,G.open(),X.buttonFalse(q),S.addEventListener("submit",H)}));var X=new r(d.formSelector,d);X.enableValidation();var Y=new r(d.formSelectorCards,d);Y.enableValidation()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,