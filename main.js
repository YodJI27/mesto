(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e,n,r,o,i){var c=this,a=e.item,u=e.handleCardClick;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=a.name,this._link=a.link,this._idUser=a.owner._id,this._idCards=a._id,this._likeCards=a.likes.length,this._likes=a.likes,this._template=n,this._handleCardClick=u,this._deleteCardsPopup=r,this._apiCards=i,this._apiUser=o.getInfo().then((function(e){c.checkForId(e._id),c._myLikes(e._id)})),this._editName=document.querySelector(".profile__author").textContent}var n,r;return n=t,(r=[{key:"_getTemplate",value:function(){return document.querySelector(this._template).content.querySelector(".cards__item").cloneNode(!0)}},{key:"checkForId",value:function(e){this._idUser!==e&&this._buttonDelete.classList.add("cards__delete_inactive")}},{key:"_likeCount",value:function(e){e.length?this._cardsLike.textContent=e.length:this._cardsLike.textContent=""}},{key:"_myLikes",value:function(e){var t=this;this._likes.some((function(n){e===n._id&&t._likeButton.classList.add("cards__like_active")}))}},{key:"_clickLike",value:function(e){var t=this;e.target.classList.contains("cards__like_active")?this._apiCards.deleteLikes(this._idCards).then((function(n){e.target.classList.remove("cards__like_active"),t._likeCount(n.likes)})):this._apiCards.putLikes(this._idCards).then((function(n){e.target.classList.add("cards__like_active"),t._likeCount(n.likes)}))}},{key:"_deleteCards",value:function(){this._element.remove(),this._element=null}},{key:"_deleteCardsFunction",value:function(){var e=this;document.querySelector(".popup__delete_button").addEventListener("click",(function(){e._deleteCards(),e._apiCards.deleteCards(e._idCards),e._deleteCardsPopup.close()}))}},{key:"_setEventListener",value:function(){var e=this;this._element.querySelector(".cards__like").addEventListener("click",(function(t){e._clickLike(t)})),this._element.querySelector(".cards__delete").addEventListener("click",(function(){e._deleteCardsPopup.open(),e._deleteCardsFunction()})),this._cardValue.addEventListener("click",(function(){e._handleCardClick()}))}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._cardValue=this._element.querySelector(".cards__image"),this._buttonDelete=this._element.querySelector(".cards__delete"),this._cardsLike=this._element.querySelector(".cards__like_count"),this._likeButton=this._element.querySelector(".cards__like"),this._setEventListener(),this._element.querySelector(".cards__text").textContent=this._name,this._cardValue.src=this._link,this._cardValue.alt=this._name,this._cardsLike.textContent=this._likeCards,this._myLikes(),this._element}}])&&e(n.prototype,r),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._form=document.querySelector(t),this._inputList=Array.from(this._form.querySelectorAll(n.popupText)),this._popupButton=this._form.querySelector(n.popupButton),this._popupTextNameError=n.popupTextNameError,this._popupButonActive=n.popupButonActive}var t,r;return t=e,(r=[{key:"_showInputError",value:function(e,t){var n=this._form.querySelector("#".concat(e.id,"-error"));e.classList.add(this._popupTextNameError),n.textContent=t}},{key:"_hideInputError",value:function(e){var t=this._form.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._popupTextNameError),t.textContent=""}},{key:"removeError",value:function(){var e=this;this._inputList.forEach((function(t){e._hideInputError(t)}))}},{key:"_isValid",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_hasNotValidInput",value:function(e){return e.some((function(e){return!e.validity.valid}))}},{key:"_toggleButtonState",value:function(e){this._hasNotValidInput(e)?this.buttonActive():this.buttonFalse()}},{key:"buttonActive",value:function(){this._popupButton.classList.add(this._popupButonActive),this._popupButton.setAttribute("disabled",!0)}},{key:"buttonFalse",value:function(){this._popupButton.classList.remove(this._popupButonActive),this._popupButton.removeAttribute("disabled")}},{key:"_setEventListener",value:function(){var e=this,t=this._inputList;t.forEach((function(n){n.addEventListener("input",(function(){e._isValid(n),e._toggleButtonState(t)}))})),this._toggleButtonState(t)}},{key:"enableValidation",value:function(){this._form.addEventListener("submit",(function(e){e.preventDefault()})),this.buttonFalse(),this._setEventListener()}}])&&n(t.prototype,r),e}();function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&(console.log("123"),this.close())}},{key:"setEventListeners",value:function(){var e=this;this._popup.querySelector(".popup__close").addEventListener("click",(function(){e.close}))}}])&&o(t.prototype,n),e}();function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return(u="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=p(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var _=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(c,e);var t,n,r,o,i=(r=c,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=p(r);if(o){var n=p(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return l(this,e)});function c(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),(n=i.call(this,e))._handleFormSubmit=t,n._form=n._popup.querySelector(".popup__container"),n._formInputs=n._popup.querySelectorAll(".popup__text"),n.setEventListeners(),n}return t=c,(n=[{key:"_getInputValues",value:function(){var e=this;return this._case={},this._formInputs.forEach((function(t){e._case[t.name]=t.value})),this._case}},{key:"close",value:function(){this._form.reset(),u(p(c.prototype),"close",this).call(this)}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("submit",(function(){e._handleFormSubmit(e._getInputValues()),e.close()})),u(p(c.prototype),"setEventListeners",this).call(this)}}])&&a(t.prototype,n),c}(i);function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?v(e):t}function v(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function m(e,t,n){return(m="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=b(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var k=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(c,e);var t,n,r,o,i=(r=c,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=b(r);if(o){var n=b(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return y(this,e)});function c(e,t){var n,r,o=t.textImage,a=t.photoImage;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),(r=i.call(this,e))._textImage=o,r._photoImage=a,m((n=v(r),b(c.prototype)),"setEventListeners",n).call(n),r}return t=c,(n=[{key:"open",value:function(e,t){this._photoImage.src=t,this._photoImage.alt=e,this._textImage.textContent=e,m(b(c.prototype),"open",this).call(this)}}])&&d(t.prototype,n),c}(i);function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var S=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderElements",value:function(){var e=this;this._items.reverse().forEach((function(t){e._renderer(t)}))}},{key:"addItem",value:function(e){this._container.prepend(e)}}])&&g(t.prototype,n),e}();function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var C=function(){function e(t){var n=t.nameSelector,r=t.jobSelector,o=t.avatarSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._nameSelector=document.querySelector(n),this._jobSelector=document.querySelector(r),this._avatarSelector=document.querySelector(o)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._nameSelector.textContent,job:this._jobSelector.textContent}}},{key:"setUserInfo",value:function(e,t){this._nameSelector.textContent=e,this._jobSelector.textContent=t,this._avatarSelector.alt=e}}])&&E(t.prototype,n),e}();function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var w=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=t.url,this._headers=t.headers}var t,n;return t=e,(n=[{key:"getInfo",value:function(){return fetch(this._url,{method:"GET",headers:this._headers}).then(this._checkError)}},{key:"addCardsInServer",value:function(){return fetch(this._url,{method:"GET",headers:this._headers}).then(this._checkError)}},{key:"getAddCards",value:function(e,t){return fetch(this._url,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(this._checkError)}},{key:"getEditInfo",value:function(e,t){return fetch(this._url,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._checkError)}},{key:"deleteCards",value:function(e){return fetch("".concat(this._url,"/").concat(e),{method:"DELETE",headers:this._headers}).then(this._checkError)}},{key:"editAvatar",value:function(e){return fetch("".concat(this._url,"/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkError)}},{key:"putLikes",value:function(e){return fetch("".concat(this._url,"/likes/").concat(e),{method:"PUT",headers:this._headers}).then(this._checkError)}},{key:"deleteLikes",value:function(e){return fetch("".concat(this._url,"/likes/").concat(e),{method:"DELETE",headers:this._headers}).then(this._checkError)}},{key:"_checkError",value:function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}}])&&L(t.prototype,n),e}(),q={formSelector:".popup__container",formSelectorCards:".popup__container_cards_item",formSelectorAvatar:".popup__container_edit_avatar",popupText:".popup__text",popupButton:".popup__button",popupTextNameError:"popup__text_name_error",popupButonActive:"popup__button_active_not"},I=document.querySelector(".popup"),j=document.querySelector(".delete__cards"),O=document.querySelector(".profile__edit_open_popup"),x=document.querySelector(".profile__add"),P=document.querySelector(".popup__text_name_input"),T=document.querySelector(".popup__text_job_input"),A=(document.querySelector(".profile__author"),document.querySelector(".profile__description"),document.querySelector(".popup__container"),document.querySelector(".photo")),B=document.querySelector(".photo__image"),R=document.querySelector(".photo__text"),V=document.querySelector(".popup_cards"),N=(document.querySelector(".popup__text_name_cards"),document.querySelector(".popup__text_job_cards"),document.querySelector(".popup__button_save_form")),D=document.querySelector(".popup__button_form_save"),F=(document.getElementById("name-input-error"),document.getElementById("job-input-error"),document.getElementById("input-name-error"),document.getElementById("url-input-error"),document.querySelector(".cards")),U=(document.querySelector(".cards__like_count"),document.querySelector(".popup__avatar")),J=document.querySelector(".profile__avatar"),z=document.querySelector(".popup__button_avatar_form"),G=document.querySelector(".profile__image"),H=new w({url:"https://mesto.nomoreparties.co/v1/cohort-17/users/me",headers:{Authorization:"ef54f240-380e-482d-82be-6a3e691e6be6","content-type":"application/json"}}),M=new w({url:"https://mesto.nomoreparties.co/v1/cohort-17/cards",headers:{Authorization:"ef54f240-380e-482d-82be-6a3e691e6be6","content-type":"application/json"}}),K=new C({nameSelector:".profile__author",jobSelector:".profile__description",avatarSelector:".profile__image"}),Q=new _(".popup",(function(){K.setUserInfo(P.value,T.value),W(!1,D,"Cохранение..."),H.getEditInfo(P.value,T.value).finally((function(e){return W(!1,D,"Сохранить")})),Q.close()})),W=function(e,t,n){t.textContent=n};H.getInfo().then((function(e){G.src=e.avatar,K.setUserInfo(e.name,e.about)})).catch((function(e){console.log(e)}));var X=new i(".delete__cards");I.addEventListener("click",(function(e){(e.target.classList.contains("popup")||e.target.classList.contains("popup__close"))&&(te.removeError(),Q.close())})),j.addEventListener("click",(function(e){(e.target.classList.contains("delete__cards")||e.target.classList.contains("popup__delete_close_button"))&&X.close()})),U.addEventListener("click",(function(e){(e.target.classList.contains("popup__avatar")||e.target.classList.contains("popup__close_avatar"))&&Z.close()})),V.addEventListener("click",(function(e){(e.target.classList.contains("popup_cards")||e.target.classList.contains("popup__close_cards_item"))&&(ne.removeError(),$.close())})),A.addEventListener("click",(function(e){(e.target.classList.contains("photo")||e.target.classList.contains("photo__close"))&&ee.close()}));var Y=function(e){return new t({item:e,handleCardClick:function(){ee.open(e.name,e.link)}},"#cards__template",X,H,M)},Z=new _(".popup__avatar",(function(e){W(!0,z,"Сохранение..."),H.editAvatar(e.link).then((function(e){G.src=e.avatar})).catch((function(e){console.log(e)})).finally((function(e){return W(!1,z,"Сохранить")}))})),$=new _("#cards__popup",(function(e){W(!0,N,"Создание..."),M.getAddCards(e.name,e.link).then((function(e){var t=Y(e).generateCard();F.prepend(t)})).catch((function(e){console.log(e)})).finally((function(e){return W(!1,N,"Cоздать")}))}));M.addCardsInServer().then((function(e){var t=new S({items:e,renderer:function(e){var n=Y(e);n.checkForId;var r=n.generateCard();t.addItem(r)}},".cards");t.renderElements(e)}));var ee=new k(".photo",{textImage:R,photoImage:B});x.addEventListener("click",(function(){ne.buttonActive(),$.open()})),O.addEventListener("click",(function(){P.value=K.getUserInfo().name,T.value=K.getUserInfo().job,Q.open(),te.buttonFalse()})),J.addEventListener("click",(function(){Z.open()}));var te=new r(q.formSelector,q);te.enableValidation();var ne=new r(q.formSelectorCards,q);ne.enableValidation(),new r(q.formSelectorAvatar,q).enableValidation()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,